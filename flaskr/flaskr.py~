import os
import sqlite3
from flask import Flask, request, session, g, redirect, url_for, abort, render_template, flash
import pandas as pd

app = Flask(__name__)
app.config.from_object(__name__)

app.config.update(dict(
    DATABASE = os.path.join(app.root_path, 'flaskr.db'),
    SECRET_KEY = 'development key',
    USERNAME = 'admin', 
    PASSWORD = 'default'
))

app.config.from_envvar('FLASKR_SETTINGS', silent = True)

def connect_db():
    rv = sqlite3.connect(app.config['DATABASE'])
    rv.row_factory = sqlite3.Row
    return rv
def get_db():
    if not hasattr(g, 'sqlite_db'):
        g.sqlite_db = connect_db()
    return g.sqlite_db

@app.teardown_appcontext
def close_db(error):
    if hasattr(g, 'sqlite_db'):
        g.sqlite_db.close()

def init_db():
    db = get_db()
    with app.open_resource('schema.sql', mode = 'r') as f:
        db.cursor().executescript(f.read())
    db.commit()

@app.cli.command('initdb')
def initdb_command():
    init_db()
    print("Initialized the database.")

@app.route('/')
def show_entries():
    db = get_db()
    cur = db.execute('select title, text from entries order by id desc')
    entries = cur.fetchall()
    return render_template('show_entries.html', entries = entries)

@app.route('/add', methods = ['POST'])
def add_entry():
    if not session.get('logged_in'):
        abort(401)
    db = get_db()
    db.execute('insert into entries(title, text) values (?, ?)', [request.form['title'], request.form['text']])
    db.commit()
    flash('New entry was sucessfully posted')
    return redirect(url_for('show_entries'))

@app.route('/login', methods = ['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        if request.form['username'] != app.config['USERNAME']:
            error = 'Invalid username'
        elif request.form['password'] != app.config['PASSWORD']:
            error = 'Invalid password'
        else:
            session['logged_in'] = True
            flash('You were logged in')
            return redirect(url_for('show_entries'))
    return render_template('login.html', error = error)

@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    flash('You were logged out')
    return redirect(url_for('show_entries'))
<<<<<<< Updated upstream
=======


@app.route('/test')
def view_test():
    return render_template('test.html')

@app.route('/test2')
def view_test2():
    return render_template('app.html')

@app.route('/broken')
def view_test3():
    return render_template('broken.html')


@app.route('/notBroken', methods = ['POST', 'GET'])
def writePage():
    cori = False # used for checking if using Cori, since if not, no need to specify which core (haswell/knightslanding)
    env = "#!/bin/bash -l\n"
    if request.method == "POST":
        queue = request.form["queue"] + "\n"
        nodes = str(request.form["nodes"]) + "\n"
        time = str(request.form["hours"]) + ':' + str(request.form["minutes"]) + ':' + str(request.form["seconds"]) 
        machine = request.form["machine"]
	if machine != "edison":
		cori = True
        return render_template('notBroken.html', env = env, queue = queue, nodes = nodes, time = time, machine = machine, cori = cori)
    return render_template('notBroken.html', env = env)
#    time =
 #   coreType =


@app.route('/specific', methods = ['POST', 'GET'])
def writeSpecificBatch():
    TIME = "04:00:00"
    QUEUE = "debug"
    CORETYPE = "haswell"
    NODES = 8

    DIRECTORY_NAME = "demo" # name of directory on Cori in which everything is being run

    AllData = pd.read_csv("/home/casey/flaskr/flaskr/ChenDataSet.csv")

    rowCount=AllData.shape[0]
    columnCount = AllData.shape[1]

    #print(AllData)

    #Converts IDs to set to remove duplicates
    uniqueIDs = set(AllData["ID"])

    index = []
    #Finds first and last index of each ID, then appends them to index list
    def foo(lst, x):
	    firstRow = lst.index(x)
	    lastRow = len(lst) -1 - lst[::-1].index(x)
	    index.append((firstRow,lastRow))

    #print(firstRow)
    #print(lastRow)

    sentinal = 0
    #executes foo on each ID in data, sentinal variable terminates function after 3 ID's for reduced dataset
    for y in uniqueIDs:
	    foo(list(AllData["ID"]), y)
	    sentinal += 1
	    if sentinal == 3:
		    break

    results = open('indices', 'w')
    results.write(str(index))
    results.close()

    tasks = open('specificProteinClassification.txt', 'w')

    for z in range(len(index)):
	    for y in range(len(index)):
		    tasks.write("wrapper.sh ChenDataSet.csv SVR  \"(10,129)\" \"(" + str(index[z][0]) + "," + str(index[z][1]) + ")\" \"(" +str(index[y][0]) + "," + str(index[y][1]) + ")\" 131\n")
    tasks.close()

		
    batch = open('testBatch', 'w')

    batch.write("#!/bin/bash -l\n\n")
    batch.write("#SBATCH -N ")
    batch.write(str(NODES) + "\n")
    batch.write("#SBATCH -t ")
    batch.write(TIME + "\n")
    batch.write("#SBATCH -p " + QUEUE + "\n")
    batch.write("#SBATCH -C " + CORETYPE + "\n")
    batch.write("module load python\n")
    batch.write("module load deeplearning\n")

    batch.write("export PATH=$PATH:/usr/common/tig/taskfarmer/1.5/bin:$(pwd)\n")
    batch.write("export THREADS=224\n")
    batch.write("runcommands.sh specificProteinClassification.txt")
    batch.close()

    wrapper = open('wrapper', 'w')
    wrapper.write("cd /global/homes/c/clorenze/" + DIRECTORY_NAME+"\n")
    wrapper.write("python protein_ML-test.py $1 $2 $3 $4 $5 $6")
    wrapper.close()
    return render_template('notBroken.html')

@app.route('/iterative', methods = ['POST', 'GET'])
def writeIterBatch():
    TIME = "04:00:00"
    QUEUE = "regular"
    CORETYPE = "haswell"
    NODES = 6
    THREADS = 32 * (NODES - 1) # Threads are equal to 32 * nodes - 1 because task farmer requires one node of its own for task farmer server
    DIRECTORY_NAME = "testIter" # name of directory on Cori in which everything is being run

    tasks = open('tasks', 'w')
    for x in range(11,129):
        tasks.write("wrapper.sh " + str(x) + "\n")
    batch = open('testBatch', 'w')

    batch.write("#!/bin/bash -l\n\n")
    batch.write("#SBATCH -N ")
    batch.write(str(NODES) + "\n")
    batch.write("#SBATCH -t ")
    batch.write(TIME + "\n")
    batch.write("#SBATCH -p " + QUEUE + "\n")
    batch.write("#SBATCH -C " + CORETYPE + "\n")
    batch.write("module load python\n")
    batch.write("module load deeplearning\n")

    batch.write("export PATH=$PATH:/usr/common/tig/taskfarmer/1.5/bin:$(pwd)\n")
    batch.write("export THREADS=" + str(THREADS) + "\n")
    batch.write("runcommands.sh tasks.txt")
    batch.close()

    wrapper = open('wrapper', 'w')
    wrapper.write("cd /global/homes/c/clorenze/" + DIRECTORY_NAME+"\n")
    wrapper.write("python SVR $1")
    wrapper.close()
    return render_template('notBroken.html')





>>>>>>> Stashed changes
